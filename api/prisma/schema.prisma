// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  role       Role        @default(USER)
  createdAt  DateTime    @default(now())
  posts     Post[]
  savedPosts SavedPost[]
  chats      Chat[]  @relation(fields: [chatIDs], references: [id])
  chatIDs   String[] @db.ObjectId
}

model Post {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Float
  images       String[]
  address    String
  city      String
  bedroom   Int?
  bathroom  Int?
  latitude  String
  longitude String
  type     Type
  property Property
  createdAt  DateTime    @default(now())
  user  User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]


}

enum Type{
  rent
  sale
}

enum Property{
  apartment
  house
  land
}

model PostDetail{
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  utilities   String?
  pet       String?
  income   String?
  size      Int?  //size in ana
  builduparea  Int?  //build up in sq ft 12 feet
  roadacess  String? //WEST,SOUTH,EAST,NORTH
  Facing  Int?  //3,2,4.5
  floor    Int? //5,4,
  builtyear  Int? //2070,2092
  parking   String? //2 car,bike
  amenities  String?  //['Earthquake Resistant', 'Marbel', 'Parquet', 'Parking', 'Drinking Water', 'Terrace', 'Modular Kitchen', 'Closet', 'Dining Room', 'Pantry', 'Bed Room',Earthquake Resistant', 'Terrace', 'Parking', 'Drinking Water', 'Balcony', 'Bed Room', 'Closet', 'Internet', 'AirCon]"
  school   Int?
  bus  Int?
  restaurant  Int?
  post Post @relation(fields: [postId] , references: [id] ,onDelete: Cascade)
  postId String @db.ObjectId @unique
}

model  SavedPost{
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId] , references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId] , references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  postId String @db.ObjectId
  createdAt  DateTime    @default(now())
  @@unique([userId, postId])


}

model Chat {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  users  User[]  @relation(fields: [userIDs], references: [id])
  userIDs String[]  @db.ObjectId
  createdAt DateTime    @default(now())
  seenBy  String[] @db.ObjectId
  messages Message[]
  lastMessage String?
  propertyDetails Json?  
}


model Message{
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  
  text     String
  userId String
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId
  createdAt DateTime    @default(now())

}